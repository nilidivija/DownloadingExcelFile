@using System.Timers;
@implements IDisposable

<style>
    .search {
        display: flex;
        align-items: center;
        max-width: 30em;
        margin: 0 auto;
        background: #F5F5F5;
        opacity: 0.78;
        color: #666666;
        border: 1px solid #999999;
        border-radius: 2px;
        padding: 6px 12px;
    }

        .search input {
            flex: 1;
            font-family: Open Sans;
            font-size: 14px;
            line-height: 20px;
            border: none;
            background: inherit;
        }

            .search input:focus {
                outline: none;
            }
</style>

<div class="search">
    <input placeholder="Search..." @attributes="AdditionalAttributes" @bind="SearchQuery" @bind:event="oninput" />
    <i class="ms-Icon ms-Icon--Search"></i>
</div>
@code {
    Timer debounceTimer;
    string searchQuery;

    [Parameter]
    public string SearchQuery
    {
        get => searchQuery;
        set
        {
            searchQuery = value;
            debounceTimer?.Stop();
            debounceTimer?.Start();
        }
    }
    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object> AdditionalAttributes { get; set; }

    [Parameter]
    public int Debounce { get; set; } = 300;

    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += Search;
    }
    async void Search(Object source, ElapsedEventArgs e)
    {
        await InvokeAsync(() => SearchQueryChanged.InvokeAsync(SearchQuery));
    }
    public void Dispose()
    {
        debounceTimer.Dispose();
    }

}
